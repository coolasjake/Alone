<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_suit_3</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_Mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables.

//*NOTE: Variables with comments are ones that could be changed by items or in settings.


grav = 0.2                  //Downwards acceleration of gravity.
hsp = 0
vsp = 0
movespeed = 4               //Players horisontal movement speed (also while falling).
jumpspeed = 6.5             //Initial upwards speed of a jump.
doublejump = 0
rocketboot_length = 6000    //Number of steps (60 per second) rocketboots can be on for continuously.
rocketboot_power = 0.3      //Ammount of upwards 'force' they provide (subtract gravity).
rocketboot_count = 0        
rocketboot_count_count = 0
rocketboot_pause = 0
fall_time = 0
max_damage = 50             //Maximum damage player can take from one thing.
prevmeeting = 0
x_flip = 1
angle = 0
image_count = 0
image_count_count = 0
image = spr_suit_3_0        //(WILL) be used to change the armour sprite.
deactivate_count = 5
mouse_up = 0

selected_item = 0

inner_radius = 15           //Size of the rocketboot display circle.
total_radius = 17           //See above.

T_Energy = 500000           //Total/Max energy.
T_Integrity = 100           //Total/Max integrity (health).
T_Oxygen = 3600             //Total/Max oxygen.

Energy = T_Energy
Integrity = T_Integrity
Oxygen = T_Oxygen

prev_Integrity = Integrity
prev_Integrity_count = 0

globalvar pause;
pause = false

draw_set_font(font_stats)   //Font for stats. Code needs to be changed if multiple stats are used.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Lazer and Helmet.
if !instance_exists(obj_Helmet) {instance_create(x,y,obj_Helmet)}
if !instance_exists(obj_Lazer) {instance_create(x,y,obj_Lazer)}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>801</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_cursor</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>spr_Cursor</sprite>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>404</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_number</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>obj_Player_Main</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stats code block.

if keyboard_check_pressed(vk_escape) and pause = false {pause = true}
else if keyboard_check_pressed(vk_escape) {pause = false}


if pause = true {exit}

Oxygen -= 1
/*
if Oxygen &lt;= 0
{
show_message("Oxygen ran out.")
game_end()
}
*/
if Oxygen = 0 {show_message("Oxygen ran out.")}


if Integrity &lt;= 0
{
show_message("Your armour broke.")
game_end()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main code block.
//if pause = true {exit}

if keyboard_check(ord('D')) or keyboard_check(vk_right) {key_right = 1}
else {key_right = 0}
if keyboard_check(ord('A')) or keyboard_check(vk_left) {key_left = -1}
else {key_left = 0}
if keyboard_check_pressed(ord('W')) or keyboard_check_pressed(vk_up) or keyboard_check_pressed(vk_space) {key_jump = 1}
else {key_jump = 0}
if keyboard_check(ord('S')) or keyboard_check(vk_down) or keyboard_check(vk_shift) {key_down = 1}
else {key_down = 0}

//Mouse Movement! 
if mouse_check_button(mb_right)
{
if mouse_x &gt;= x + 40 {key_right = 1}
else if mouse_x &lt; x - 40 {key_left = -1}
if mouse_y &lt; y - 50 
{
key_jump = 1
mouse_up = 1
}
else {mouse_up = 0}
}
else {mouse_up = 0}

//Add L/R inputs.
move = key_left + key_right;

//Flip image if facing left.
if move &gt; 0 and vsp = 0 and (place_meeting(x,y+1,obj_Wall_Parent))
{
sprite_index = spr_legs_animated
image_speed = (10/60)
}
else if move &lt; 0 and vsp = 0 and (place_meeting(x,y+1,obj_Wall_Parent))
{
sprite_index = spr_legs_animated
image_speed = (10/60)
}
else {sprite_index = spr_suit_3}

//Set horizontal speed + add gravity.
hsp = move * movespeed;
if (vsp &lt; 16) {vsp += grav}
else {fall_time += 1}

//Doublejump.
//*NOTE: Change \/ to 'if (doublejump = 1' to disable double jumps.
if (doublejump = 0 and key_jump = 1)
{
    doublejump = 1
    key_jump = 0
    //vsp =  -jumpspeed
}
//Rocketboots.
if rocketboot_count &gt; 0 and (keyboard_check(ord('W')) or keyboard_check(vk_up) or mouse_up = 1) and rocketboot_pause = 0
{
    rocketboot_count -= 1
    if vsp &gt; -(rocketboot_power*10) {vsp -= rocketboot_power}
}
else if rocketboot_pause &gt; 0 {rocketboot_pause -= 1}

if rocketboot_count &lt; rocketboot_length and !(keyboard_check(ord('W')) or keyboard_check(vk_up) or mouse_up = 1) and !(Energy-1 &lt; 0)
{
if rocketboot_count_count = 1
{
    rocketboot_count += 100
    Energy -= 1
    rocketboot_count_count = 0
}
else
{
rocketboot_count_count += 1
}
}


if (place_meeting(x,y+1,obj_Wall_Parent) and rocketboot_count &lt; rocketboot_length) and !(keyboard_check(ord('W')) or keyboard_check(vk_up) or mouse_up = 1) and !(Energy-1 &lt; 0)
{
rocketboot_count += 1
Energy -= 1
}


//Jump if touching a wall.
if (place_meeting(x,y+1,obj_Wall_Parent) and key_jump = 1)
{
    doublejump = 0
    vsp =  -jumpspeed
    //rocketboot_count = rocketboot_length
    rocketboot_pause = 10
}

//horizontal colision
if (place_meeting(x+hsp,y,obj_Wall_Parent))
{
    while(!place_meeting(x+sign(hsp),y,obj_Wall_Parent))
     {
          x += sign(hsp);
     }
     hsp = 0;
}
x += hsp;

//vertical colision
if (place_meeting(x,y+vsp,obj_Wall_Parent))
{
        //if rocketboot_count &lt; rocketboot_length {rocketboot_count += 1}
    while(!place_meeting(x,y+sign(vsp),obj_Wall_Parent))
     {
        y += sign(vsp);
     }
     if (vsp &gt; 0)
     {
        doublejump = 1
        prevmeeting = 1
        //rocketboot_count = rocketboot_length //to instantly fill when on ground.
     }
     //Fall damage
     if vsp &gt; 8.5
     { 
        if ceil((vsp*2)+(fall_time/2)) &lt;= max_damage {Integrity -= ceil((vsp*2)+(fall_time/2))}
        else {Integrity -= max_damage}
        fall_time = 0
     }
     vsp = 0
}
else if (prevmeeting = 1)
{
prevmeeting = 0
doublejump = 0
}

y += vsp;



if (place_meeting(x+move,y,obj_Wall_Parent)) and !(place_meeting(x+move,y-2,obj_Wall_Parent))
{
    x += move
    y -= 1
}



if move = 0 and !(key_down = 1) and (place_meeting(x,y+1,obj_Wall_Parent))
{
if !(place_meeting(x+1,y+1,obj_Wall_Parent)) {x += 1}
else if !(place_meeting(x-1,y+1,obj_Wall_Parent)) {x -= 1}
}



if place_meeting(x,y,obj_Wall_Parent)
{
if !place_meeting(x,y+8,obj_Wall_Parent)
{
y += 1
}
else if !place_meeting(x,y-8,obj_Wall_Parent)
{
y -= 1
}

if !place_meeting(x+8,y,obj_Wall_Parent)
{
x += 1
}
else if !place_meeting(x-8,y,obj_Wall_Parent)
{
x -= 1
}
}



//Deactivate instances:
if deactivate_count &gt; 0 {deactivate_count -= 1}
else
{
deactivate_count = 15
instance_activate_all()

with (all)
{
if object_index = obj_INDESTRUCTIBLE {global.Map[floor(x/64),floor(y/64)] = 1}
else if object_index = obj_Stone_1 {global.Map[floor(x/64),floor(y/64)] = 2}
else if object_index = obj_Stone_2 {global.Map[floor(x/64),floor(y/64)] = 3}
}
global.PX = x
global.PY = y

instance_deactivate_region(view_xview[1] - 220, view_yview[1] - 220, view_xview[1] + view_wview[1] + 220, view_yview[1] + view_hview[1] + 220, false, true)
instance_activate_object(obj_Helmet)
instance_activate_object(obj_Lazer)
instance_activate_object(obj_Save)

if instance_number(obj_Player_Main) &gt; 1 {instance_destroy()}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//227,163
draw_set_alpha(1)
if mouse_x - view_xview[0] &lt; 227 and mouse_y - view_yview[0] &lt; 163 {draw_set_alpha(0.5)}
draw_sprite(spr_stat_display, 0, 0, 0)

draw_set_alpha(1)
if mouse_x - view_xview[0] &gt; view_wview[0] - 256 and mouse_y - view_yview[0] &gt; view_hview[0] - 192 {draw_set_alpha(0.5)}
draw_sprite(spr_Map_border, 0, view_wview[0] - 256, view_hview[0] - 192)

draw_set_alpha(1)
if mouse_x - view_xview[0] &lt; 345 and mouse_y - view_yview[0] &gt; view_hview[0] - 90 {draw_set_alpha(0.5)}
draw_sprite(spr_Items, selected_item, 0, view_hview[0] - 96)

draw_set_alpha(1)

//Red flash when damaged.
if prev_Integrity &gt;= Integrity 
{
if Integrity &lt;= 0 {draw_set_alpha(0.75)}
else {draw_set_alpha(((prev_Integrity-Integrity)/max_damage))}
draw_set_colour(c_white)
draw_sprite(spr_Damage,0,0,0)

if prev_Integrity_count = 200
{
    prev_Integrity -= 1
}
else
{
prev_Integrity_count += 1
}
}
draw_set_alpha(1)

//Integrity stat.
draw_set_colour(c_red)
if Integrity &gt; 0 {draw_rectangle(12,14,((Integrity/T_Integrity)*145)+12,15,0)}
draw_text(132,26,string(ceil((Integrity/T_Integrity)*100))+"%")


//Energy stat.
draw_set_colour(c_lime)
if Energy &gt; 0 {draw_rectangle(12,48,((Energy/T_Energy)*145)+12,49,0)}
draw_text(132,60,string(ceil((Energy/T_Energy)*100))+"%")

//Oxygen stat.
draw_set_colour(c_aqua)
if Oxygen &gt; 0 {draw_rectangle(12,82,((Oxygen/T_Oxygen)*145)+12,83,0)}
draw_text(132,94,string(ceil((Oxygen/T_Oxygen)*100))+"%")


draw_set_color(c_white)
draw_set_alpha(1)
draw_text(850,5 ,"Horizontal speed: " + string(hsp))
draw_text(850,15,"Vertical speed:   " + string(vsp))
draw_text(850,25,"Horizontal position: " + string(x))
draw_text(850,35,"Vertical position:   " + string(y))


//Rocketboot fuel circle (partially copied)
var i
draw_set_color(c_aqua); // the color of your circle
draw_set_alpha(1); // the transparency of your circle
draw_primitive_begin(pr_trianglestrip)
for(i=0;i&lt;rocketboot_count/rocketboot_length*360;i+=1){ // n is precision, a low n will make the game slow, but will also make a smooth circle
draw_vertex(996+lengthdir_x(inner_radius,i),20+lengthdir_y(inner_radius,i)) // (xoffset;yoffset) is the middle of your circle
draw_vertex(996+lengthdir_x(total_radius,i),20+lengthdir_y(total_radius,i)) // inner_radius is the radius of the gap in the circle and total_radius is obvious
}
draw_primitive_end()

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mini-map.

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player, score and light.
draw_self()

draw_text(x+30,y,pause)

draw_set_colour(c_black)
draw_set_alpha((y+100)/room_height)
draw_sprite(spr_helmet_light,0,x,y)
draw_rectangle(x-1536,y-1152,x-385,y+1152,0)
draw_rectangle(x+1536,y-1152,x+384,y+1152,0)
draw_rectangle(x-384,y-385,x+383,y-1152,0)
draw_rectangle(x-384,y+384,x+383,y+1152,0)
draw_set_alpha(1)

if (keyboard_check(ord('W')) or keyboard_check(vk_up) or mouse_up = 1) and rocketboot_count &gt; 0 {draw_sprite_ext(spr_boosters,image_count,x,y+76,x_flip,1,0,c_white,1)}


if image_count_count = 5
{
    if image_count = 3 {image_count = 0}
    else {image_count += 1}
    image_count_count = 0
}
else
{
image_count_count += 1
}

draw_set_colour(c_gray)
draw_rectangle(view_xview,view_yview,view_xview+view_wview,view_yview+view_hview,1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
