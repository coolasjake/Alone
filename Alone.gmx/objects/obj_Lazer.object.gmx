<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_laser</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables.
laser_power = 10
image_count = 0
ID = instance_nearest(x,y,obj_Wall_Parent)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lazer rotation.
angle = point_direction(x,y,mouse_x,mouse_y)

if angle &gt; 90 and angle &lt; 180 
{
image_xscale = -1
//obj_Player_Main.image_xscale = -1
angle += 180
}
else if angle &lt; 270 and angle &gt;= 180
{
image_xscale = -1
//obj_Player_Main.image_xscale = -1
angle -= 180
}
else 
{
image_xscale = 1
//obj_Player_Main.image_xscale = 1
}

if angle &gt; 0 and angle &lt;= 90 and angle &gt; 45 {angle = 45}
else if angle &gt;= 270 and angle &lt; 360 and angle &lt; 315 {angle = 315}

/*else if angle &lt; 180 and angle &gt; 90 and angle &lt; 135
{
angle = 45
image_xscale = -1
}
else if angle &gt; 180 and angle &lt; 270 and angle &gt; 225
{
angle = 315
image_xscale = -1
}*/

if image_count = 8 {image_count = 0}
else {image_count += 1}

image_angle = angle
x = obj_Player_Main.x
y = obj_Player_Main.y+26
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Laser Draw Code.
if mouse_check_button(mb_left) and !(obj_Player_Main.Energy-laser_power &lt; 0)
{

obj_Player_Main.Energy -= laser_power

A = degtorad(angle)
Y = y+cos(A)*15
X = x+sin(A)*15
A = degtorad(angle+90)

if image_xscale = 1
{
final_X = X+sin(A)*49
final_Y = Y+cos(A)*49
}
else
{
final_X = X-sin(A)*49
final_Y = Y-cos(A)*49
}

draw_set_alpha(0.5)
draw_circle_colour(final_X,final_Y,6,c_white,c_green,0)

if image_xscale = 1
{
new_X = final_X+sin(A)*96
new_Y = final_Y+cos(A)*96
}
else
{
new_X = final_X-sin(A)*96
new_Y = final_Y-cos(A)*96
}

//while laser has not hit object
count = 0
while !collision_line(final_X,final_Y,new_X,new_Y,all,0,1) and count &lt; 7
{
    draw_sprite_ext(spr_good_laser,image_count,final_X,final_Y,obj_Player_Main.x_flip,1,angle,c_white,1)
    final_X = new_X
    final_Y = new_Y
    
    if image_xscale = 1
    {
    new_X = final_X+sin(A)*96
    new_Y = final_Y+cos(A)*96
    }
    else
    {
    new_X = final_X-sin(A)*96
    new_Y = final_Y-cos(A)*96
    }
    
    count += 1
}

//Draw final part of laser
//A = degtorad(angle)
if count &lt; 7
{
    distance = 0
    if image_xscale = 1
    {
        for (distance=0;distance&lt;97;distance+=1)
        {
            if collision_point(final_X+sin(A)*distance,final_Y+cos(A)*distance,all,1,1)
            {
            ID.source = 0
            ID = collision_point(final_X+sin(A)*distance,final_Y+cos(A)*distance,all,1,1)
            ID.strength -= laser_power
            ID.source = 1
            new_angle = scr_angle_circle(angle,-22)
            ID.angle = angle//floor(new_angle/45)
            A = degtorad(angle+180)
            draw_sprite_general(spr_good_laser,image_count,0,0,distance,32,final_X+sin(A)*15,final_Y+cos(A)*15,image_xscale,1,angle,c_white,c_white,c_white,c_white,1)
            break
            }
        }
    }
    else
    {
        for (distance=0;distance&lt;97;distance+=1)
        {
            if collision_point(final_X-sin(A)*distance,final_Y-cos(A)*distance,all,1,1)
            {
            ID.source = 0
            ID = collision_point(final_X-sin(A)*distance,final_Y-cos(A)*distance,all,1,1)
            ID.strength -= laser_power
            ID.source = 1
            new_angle = scr_angle_circle(angle,-22)
            ID.angle = angle//floor(new_angle/45)
            A = degtorad((angle+180)-(2*angle))
            draw_sprite_general(spr_good_laser,image_count,0,0,distance,32,final_X-sin(A)*8,final_Y+cos(A)*15,image_xscale,1,angle,c_white,c_white,c_white,c_white,1)
            break
            }
        }
    }
}

//draw_set_alpha(0.5)
//draw_circle_colour(final_X,final_Y,6,c_white,c_green,0)

//draw_set_colour(c_green)
draw_set_alpha(1)
//draw_line(final_X,final_Y,mouse_x,mouse_y+2)
//draw_line(x+sin(A)*14,y+cos(A)*14,mouse_x,mouse_y+2)
//16.6 degrees, 50.96
}
draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>9,24</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
